import math
import time
inf = 100
xx = [inf, 0.05400000140070915, 0.05700000002980232, 0.05999999865889549, 0.05999999865889549, 0.05999999865889549, 0.05999999865889549, 0.05999999865889549, 0.06400000303983688, 0.057999998331069946, 0.06400000303983688, 0.06400000303983688, 0.06400000303983688, 0.05900000035762787, 0.06499999761581421, 0.06499999761581421, 0.06499999761581421, 0.06499999761581421, 0.06499999761581421, 0.06300000101327896, 0.06300000101327896, 0.07100000232458115, 0.06300000101327896, 0.06700000166893005, 0.07199999690055847, 0.07100000232458115, 0.06700000166893005, 0.07100000232458115, 0.07100000232458115, 0.07000000029802322, 0.06700000166893005, 0.07000000029802322, 0.07000000029802322, 0.06700000166893005, 0.06700000166893005, 0.06599999964237213, 0.06599999964237213, 0.06499999761581421, 0.06499999761581421, 0.0689999982714653, 0.07500000298023224, 0.0689999982714653, 0.07100000232458115, 0.07500000298023224, 0.07500000298023224, 0.07900000363588333, 0.08299999684095383, 0.08299999684095383, 0.07999999821186066, 0.07999999821186066, 0.07999999821186066, 0.07000000029802322, 0.07000000029802322, 0.07000000029802322, 0.07000000029802322, 0.07100000232458115, 0.07699999958276749, 0.07699999958276749, 0.07900000363588333, 0.07900000363588333, 0.0860000029206276, 0.0860000029206276, 0.07900000363588333, 0.07100000232458115, 0.0689999982714653, 0.0689999982714653, 0.07100000232458115, 0.07599999755620956, 0.07599999755620956, 0.07599999755620956, 0.07599999755620956, 0.07800000160932541, 0.06599999964237213, 0.06599999964237213, 0.07800000160932541, 0.07000000029802322, 0.06599999964237213, 0.06599999964237213, 0.07000000029802322, 0.07000000029802322, 0.07100000232458115, 0.07699999958276749, 0.07699999958276749, 0.07100000232458115, 0.06800000369548798, 0.06800000369548798, 0.06700000166893005, 0.06700000166893005, 0.06700000166893005, 0.07699999958276749, 0.07199999690055847, 0.07699999958276749, 0.07400000095367432, 0.07400000095367432, 0.07400000095367432, 0.07900000363588333, 0.07400000095367432, 0.07900000363588333, 0.07900000363588333, 0.07000000029802322, 0.0689999982714653, 0.0689999982714653, 0.0689999982714653, 0.07400000095367432, 0.07400000095367432, 0.07400000095367432, 0.07400000095367432, 0.07400000095367432, 0.07400000095367432, 0.07400000095367432, 0.07599999755620956, 0.07100000232458115, 0.07500000298023224, 0.07500000298023224, 0.07500000298023224, 0.07500000298023224, 0.07500000298023224, 0.08299999684095383, 0.08299999684095383, 0.08299999684095383, 0.07900000363588333, 0.07900000363588333, 0.07900000363588333, 0.07900000363588333, 0.07900000363588333, 0.07599999755620956, 0.06800000369548798, 0.07599999755620956, 0.06599999964237213, 0.07599999755620956, 0.07900000363588333, 0.07900000363588333, 0.07599999755620956, 0.07599999755620956, 0.07599999755620956, 0.07100000232458115, 0.07100000232458115, 0.07100000232458115, 0.07199999690055847, 0.07100000232458115, 0.07100000232458115, 0.06800000369548798, 0.06800000369548798, 0.06800000369548798, 0.06700000166893005, 0.06800000369548798, 0.06800000369548798, 0.06800000369548798, 0.06700000166893005, 0.06800000369548798, 0.07000000029802322, 0.07000000029802322, 0.06300000101327896, 0.06300000101327896, 0.06300000101327896, 0.06300000101327896, 0.06599999964237213, 0.07000000029802322, 0.07000000029802322, 0.07000000029802322, 0.06800000369548798, 0.06300000101327896, 0.05700000002980232, 0.06300000101327896, 0.06300000101327896, 0.05700000002980232, 0.05700000002980232, 0.057999998331069946, 0.05700000002980232, 0.057999998331069946, 0.057999998331069946, 0.054999999701976776, 0.054999999701976776, 0.054999999701976776, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.06300000101327896, 0.06300000101327896, 0.06300000101327896, 0.05999999865889549, 0.05400000140070915, 0.05400000140070915, 0.05700000002980232, 0.057999998331069946, 0.05700000002980232, 0.05700000002980232, 0.05700000002980232, 0.057999998331069946, 0.05900000035762787, 0.05900000035762787, 0.05900000035762787, 0.05900000035762787, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.04899999871850014, 0.04899999871850014, 0.052000001072883606, 0.052000001072883606, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.054999999701976776, 0.052000001072883606, 0.052000001072883606, 0.052000001072883606, 0.052000001072883606, 0.052000001072883606, 0.052000001072883606, 0.05000000074505806, 0.05000000074505806, 0.052000001072883606, 0.04500000178813934, 0.04500000178813934, 0.04500000178813934, 0.04500000178813934, 0.04500000178813934, 0.061000000685453415, 0.061000000685453415, 0.061000000685453415, 0.057999998331069946, 0.05400000140070915, 0.05000000074505806, 0.05400000140070915, 0.057999998331069946, 0.05000000074505806, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.050999999046325684, 0.05400000140070915, 0.05400000140070915, 0.052000001072883606, 0.052000001072883606, 0.05400000140070915, 0.057999998331069946, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.052000001072883606, 0.052000001072883606, 0.052000001072883606, 0.052000001072883606, 0.054999999701976776, 0.054999999701976776, 0.05400000140070915, 0.04500000178813934, 0.05400000140070915, 0.05400000140070915, 0.05400000140070915, 0.054999999701976776, 0.054999999701976776, 0.05400000140070915, 0.05400000140070915, 0.05400000140070915, 0.05400000140070915, 0.057999998331069946, 0.05900000035762787, 0.061000000685453415, 0.05900000035762787, 0.05900000035762787, 0.061000000685453415, 0.061000000685453415, 0.06300000101327896, 0.06300000101327896, 0.06300000101327896, 0.06300000101327896, 0.06300000101327896, 0.06499999761581421, 0.05700000002980232, 0.06499999761581421, 0.06499999761581421, 0.06800000369548798, 0.05700000002980232, 0.05400000140070915, 0.05400000140070915, 0.06300000101327896, 0.054999999701976776, 0.054999999701976776, 0.06300000101327896, 0.06800000369548798, 0.06499999761581421, 0.06499999761581421, 0.06800000369548798, 0.06499999761581421, 0.05400000140070915, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.05299999937415123, 0.04600000008940697, 0.04600000008940697, 0.04600000008940697, 0.04899999871850014, 0.05900000035762787, 0.05900000035762787, 0.054999999701976776, 0.054999999701976776, 0.052000001072883606, 0.052000001072883606, 0.054999999701976776, 0.050999999046325684, 0.05000000074505806, 0.05000000074505806, 0.04899999871850014, 0.04899999871850014, 0.04899999871850014, 0.050999999046325684, 0.050999999046325684, 0.05299999937415123, 0.054999999701976776, 0.05400000140070915, 0.05400000140070915, 0.05400000140070915, 0.05400000140070915, 0.05400000140070915, 0.05000000074505806, 0.04899999871850014, 0.05000000074505806, 0.05000000074505806, 0.05000000074505806, 0.05400000140070915, 0.05400000140070915, 0.04500000178813934, 0.05700000002980232, 0.05700000002980232, 0.04600000008940697, 0.05000000074505806, 0.05700000002980232, 0.052000001072883606, 0.052000001072883606, 0.05700000002980232, 0.05700000002980232, 0.052000001072883606, 0.061000000685453415, 0.061000000685453415, 0.050999999046325684, 0.050999999046325684, 0.050999999046325684, 0.050999999046325684, 0.050999999046325684, 0.05000000074505806, 0.05299999937415123, 0.05299999937415123, 0.052000001072883606, 0.052000001072883606, 0.052000001072883606, 0.052000001072883606, 0.057999998331069946, 0.057999998331069946, 0.057999998331069946, 0.057999998331069946, 0.054999999701976776, 0.054999999701976776, 0.06400000303983688, 0.06199999898672104, 0.06199999898672104, 0.06400000303983688, 0.06199999898672104, 0.05700000002980232, 0.054999999701976776, 0.05700000002980232, 0.05700000002980232, 0.054999999701976776, 0.061000000685453415, 0.061000000685453415, 0.061000000685453415, 0.061000000685453415, 0.061000000685453415, 0.061000000685453415, 0.061000000685453415, 0.061000000685453415, 0.06300000101327896, 0.06300000101327896, 0.06300000101327896, 0.06300000101327896, 0.06499999761581421, 0.06499999761581421, 0.06599999964237213, 0.07699999958276749, 0.07900000363588333, 0.07900000363588333, 0.07900000363588333, 0.07699999958276749, 0.07199999690055847, 0.06499999761581421, 0.07199999690055847, 0.07199999690055847, 0.07199999690055847, 0.07100000232458115, 0.07599999755620956, 0.07100000232458115, 0.06800000369548798, 0.06800000369548798, 0.07400000095367432, 0.07400000095367432, 0.07400000095367432, 0.07699999958276749, 0.07699999958276749, 0.07400000095367432, 0.07100000232458115, 0.07100000232458115, 0.07100000232458115, 0.06599999964237213, 0.06599999964237213, 0.06700000166893005, 0.06700000166893005, 0.07100000232458115, 0.07500000298023224, 0.07100000232458115, 0.07100000232458115, 0.07599999755620956, 0.07599999755620956, 0.07599999755620956, 0.07599999755620956, 0.07800000160932541, 0.07599999755620956, 0.07400000095367432, 0.07400000095367432, 0.07500000298023224, 0.07500000298023224, 0.07500000298023224, 0.07500000298023224, 0.07500000298023224, 0.07500000298023224, 0.07400000095367432, 0.08399999886751175, 0.07400000095367432, 0.07500000298023224, 0.07500000298023224, 0.07800000160932541, 0.07500000298023224, 0.07800000160932541, 0.08299999684095383, 0.08500000089406967, 0.08299999684095383, 0.08699999749660492, 0.08699999749660492, 0.08100000023841858, 0.07699999958276749, 0.08100000023841858, 0.08100000023841858, 0.0820000022649765, 0.0820000022649765, 0.0820000022649765, 0.08500000089406967, 0.08500000089406967, 0.08500000089406967, 0.0860000029206276, 0.0860000029206276, 0.08500000089406967, 0.06800000369548798, 0.07500000298023224, 0.07500000298023224, 0.07500000298023224, 0.07800000160932541, 0.07800000160932541, 0.07800000160932541, 0.07800000160932541, 0.07800000160932541, 0.07800000160932541, 0.07500000298023224, 0.08299999684095383, 0.08399999886751175, 0.08399999886751175, 0.08299999684095383, 0.08299999684095383, 0.07999999821186066, 0.07999999821186066, 0.08100000023841858, 0.07999999821186066, 0.07999999821186066, 0.07400000095367432, 0.07100000232458115, 0.07100000232458115, 0.07199999690055847, 0.07199999690055847, 0.07199999690055847, 0.07199999690055847, 0.06400000303983688, 0.06400000303983688, 0.06400000303983688, 0.06499999761581421, 0.06599999964237213, 0.06599999964237213, 0.06599999964237213, 0.06499999761581421, 0.06199999898672104, 0.06199999898672104, 0.06499999761581421, 0.06499999761581421, 0.06499999761581421, 0.06499999761581421, 0.06300000101327896, 0.06300000101327896, 0.06300000101327896, 0.06400000303983688, 0.07100000232458115, 0.07100000232458115, 0.07100000232458115, 0.07000000029802322, 0.06800000369548798, 0.06499999761581421, 0.06499999761581421, 0.06800000369548798, 0.06800000369548798, 0.06700000166893005]
##xx is the data coming in

def le(a):
    l = len(a)
    print l


# def filtInfi(rawdata):
#     data = []
#     for i in range(0, 512):
#         if rawdata[i] == "infi":
#             data.append(100.0)
#         else:
#             data.append(rawdata[i])
#     print "new data:", data
#     print len(data)



## Creat a array of degrees. return the _degary_
def degrees(dspagl):
    a = float(180)/float(511)
    deg = dspagl
    degary = [0]
    for i in range(0,511):
        deg = deg + a
        degary.append(math.radians(deg))
        i+=1
    print "degree array:",degary
    print len(degary)
    return degary




## Creat a array for triangle filter
def trifilter(degary,LW,RW):
    trifltary = []
    halfpi = math.pi/2
    for i in range(0,512):
        trideg = degary[i]
        if trideg<=halfpi:
            c = float(RW)/math.cos(trideg)
            trifltary.append(c)
        else:
            c = abs(float(LW)/math.cos(math.pi - trideg))
            trifltary.append(c)
        i+=1
    print "trifilter array:", trifltary
    print len(trifltary)
    return trifltary


## Creat a arry of the data which fltout based on the trifliter
def fltout(data,trifltary):
    fltoutary = []
    for i in range(0,512):
        od = data[i]
        fd = trifltary[i]
        if od > fd:
            fltoutary.append(100)
        elif od == inf:
            fltoutary.append(100)

        else:
            fltoutary.append(od)
        i+=1
    print "filtout array:",fltoutary
    print len(fltoutary)
    return fltoutary


## Creat a array which has the real distance
def realdistance(data,degary):
    realdisary = []
    for i in range(0,512):
        dis = data[i]
        deg = degary[i]
        if dis == 100:
            realdisary.append(100)
        else:
            realdis = math.sin(deg)*dis
            realdisary.append(realdis)
        i+=1
    print "real distance array:", realdisary
    print len(realdisary)
    return realdisary


## run function
## rawdata: data    LW: Left range  RW: Right range
def run(rawdata,LW,RW):
    time1 = time.time()


    ## is the displacement of the angle in DEGREES. 0 is acquiescence.( 0 DEGREE displacement)
    degary = degrees(20)


    trifltary = trifilter(degary,LW,RW)
    fltoutary = fltout(rawdata,trifltary)
    realdisary = realdistance(fltoutary,degary)

    time2 = time.time()
    timetake  = time2-time1
    print "time:", timetake

run(xx,0.03,0.03)

